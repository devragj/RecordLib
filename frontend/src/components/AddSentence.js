import React, { useState }  from "react";
import { connect } from 'react-redux';
import PropTypes from 'prop-types';

import { addSentence } from "../actions";
import EditSentenceWrapper from "./EditSentence";

/**
 * Component for adding a Sentence to a Charge.
 * It starts with a button.  Once the button is clicked, an id for the new sentence
 * is generated and a sentence with that id is added to the redux state.
 * This component then displays the EditSentence component, to enter the sentence information.
 * Clicking the button (whose label has changed) again will hide the EditSentence component.
 */
function AddSentence(props) {
    const { adder, sentenceId } = props;
    const [adding, setAdding] = useState(false);

    const handleClick = () => {
        if (!adding) {
            adder();
        }

        setAdding(!adding);
    }

    return (
        <div className="addSentence" style={{marginTop: "15px", marginBottom: "10px"}}>
           <button type="button" style={{marginLeft: "20px"}} onClick={handleClick}>{adding? "Done Adding Sentence": "Add Sentence"}</button>
           { adding && <EditSentenceWrapper sentenceId={sentenceId}/> }
        </div>
    );
}

AddSentence.propTypes = {
    sentenceId: PropTypes.string.isRequired,
    /**
     * The callback which adds the sentence to state.
     */
    adder: PropTypes.func.isRequired
}

/**
 * This function recreates the id of the newly-created sentence, to pass to the EditSentence component.
 * @param  {Object} state    Redux state.
 * @param  {Object} ownProps
 * @param  {string} ownProps.chargeId The id of the charge to which
 * the sentence is being added.
 * @param  {string} ownProps.index The length of the list of sentences
 * of the containing charge.
 * @return {Object}          Holds the generated sentenceId.
 */
function mapStateToProps(state, ownProps) {
    // Since the sentenceId generated by this function is used
    // by being passed to the EditSentence component after the
    // sentence has been created, we need to subtract 1 from the
    // index so as to generate the correct id.
    const index = ownProps.nextIndex - 1;
    const sentenceId = ownProps.chargeId + 'sentences@' + index;
    return { sentenceId };
};

/**
 * This function constructs the id of the sentence being created.
 * @param  {Object} dispatch    Redux dispatch.
 * @param  {Object} ownProps
 * @param  {string} ownProps.chargeId The id of the charge to which
 * the sentence is being added.
 * @param  {string} ownProps.index The length of the list of sentences
 * of the containing charge.
 * @return {Object}          Holds the function which will store the
 * new sentence in redux state.
 */
function mapDispatchToProps(dispatch, ownProps) {
    const index = ownProps.nextIndex;
    // This generates the id for the new sentence,
    // using the id pattern which is used when normalizing
    // the starting CRecord.
    const sentenceId = ownProps.chargeId + 'sentences@' + index;
    return { adder: () => {
            dispatch(addSentence(sentenceId, ownProps.chargeId));
        }
    };
};

const AddSentenceWrapper = connect(mapStateToProps, mapDispatchToProps)(AddSentence);
export default AddSentenceWrapper;